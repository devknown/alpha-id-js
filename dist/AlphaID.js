!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).AlphaID=t()}(this,(function(){"use strict";class e{static config(t){if("string"!=typeof t)throw new Error("Invalid input. The key must be a string.");e.globalKey=t}static convertNumber(t,r=""){if("number"!=typeof t&&"bigint"!=typeof t)throw new Error("Invalid input. The number must be numeric.");let n;""===r&&(r=e.globalKey),n="number"==typeof t?BigInt(t)^BigInt(e.crc32(r)):t^BigInt(e.crc32(r));const o=BigInt(e.baseChars.length);let i="";const s=e.baseChars.split("");for(;n>0;)i=s[Number(n%o)]+i,n/=o;return i}static recoverNumber(t,r=""){if("string"!=typeof t)throw new Error("Invalid input. The encoded string must be a string.");""===r&&(r=e.globalKey);const n=BigInt(e.baseChars.length);let o=BigInt(0);for(let r=0;r<t.length;r++){const i=t[r];o=o*n+BigInt(e.baseChars.indexOf(i))}const i=BigInt(o)^BigInt(e.crc32(r));return i>Number.MAX_SAFE_INTEGER?i:Number(i)}static convert(t,r=""){return e.convertNumber(t,r)}static recover(t,r=""){return e.recoverNumber(t,r)}static crc32(e){const t=[];let r=4294967295;for(let e=0;e<256;e++){let r=e;for(let e=0;e<8;e++)1&r?r=3988292384^r>>>1:r>>>=1;t[e]=r}for(let n=0;n<e.length;n++){r=r>>>8^t[255&(r^255&e.charCodeAt(n))]}return r^=4294967295,r>>>0}}return e.baseChars="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",e.globalKey="",e}));
//# sourceMappingURL=AlphaID.js.map
